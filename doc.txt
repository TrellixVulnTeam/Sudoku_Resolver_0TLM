https://stackoverflow.com/questions/45471152/how-to-create-a-sudoku-puzzle-in-python
https://github.com/dimitri/sudoku/blob/master/sudoku.txt
https://www.printable-sudoku-puzzles.com/wfiles/
https://www.sudokuoftheday.com/about/difficulty/

[0,0,3,0,2,0,6,0,0],
[9,0,0,3,0,5,0,0,1],
[0,0,1,8,0,6,4,0,0],
[0,0,8,1,0,2,9,0,0],
[7,0,0,0,0,0,0,0,8],
[0,0,6,7,0,8,2,0,0],
[0,0,2,6,0,9,5,0,0],
[8,0,0,2,0,3,0,0,9],
[0,0,5,0,1,0,3,0,0,]]



a = [[0, 0, 5, 2, 3, 0, 0, 6, 0], [8, 2, 9, 6, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 8, 0, 0, 0, 0, 0, 2],
     [0, 0, 0, 7, 0, 9, 0, 0, 0], [3, 0, 0, 0, 0, 0, 4, 9, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 4, 1, 3, 7],
     [0, 6, 0, 0, 7, 5, 9, 0, 0]]
b = [[1, 4, 6, 3, 7, 2, 5, 8, 9], [3, 2, 7, 8, 5, 9, 6, 1, 4], [8, 9, 5, 1, 6, 4, 7, 3, 2], [4, 5, 8, 2, 1, 6, 3, 9, 7],
     [9, 7, 3, 4, 8, 5, 1, 2, 6], [2, 6, 1, 9, 3, 7, 8, 4, 5], [7, 1, 2, 5, 9, 3, 4, 6, 8], [6, 8, 4, 7, 2, 1, 9, 5, 3],
     [5, 3, 9, 6, 4, 8, 2, 7, 1]]


def MAC(puzzle, var):
    queue = [[[var[0], var[1]], [var[0], i]] for i in range(0, 9)]
    queue += [[[var[0], var[1]], [i, var[1]]] for i in range(0, 9)]
    x = var[0] - var[0] % 3
    y = var[1] - var[1] % 3
    queue += [[[var[0], var[1]],[i, j]] for i, j in itertools.product(range(x, x + 3), range(y, y + 3))]
    queue.sort()
    queue = list(queue for queue, _ in itertools.groupby(queue))
    for i, j in itertools.product(range(0, 9), range(0, 9)):
        if [[i, j], [i, j]] in queue: queue.remove([[i, j], [i, j]])
    for x in queue:
        if puzzle.domains[var[0]][var[1]][0] in puzzle.domains[x[1][0]][x[1][1]]: puzzle.domains[x[1][0]][x[1][1]].remove(puzzle.domains[var[0]][var[1]][0])
    while queue:
        index = queue.pop(0)
        if Revise(index, puzzle):
            if not puzzle.domains[index[0][0]][index[0][1]]:
                global nbackTrack
                nbackTrack += 1
                return False
            newarcs = [[[index[1][0], index[1][1]], [index[1][0], k]] for k in range(0, 9)]
            newarcs += [[[index[1][0], index[1][1]], [k, index[1][1]]] for k in range(0, 9)]
            x = index[1][0] - index[1][0] % 3
            y = index[1][1] - index[1][1] % 3
            newarcs += [[[index[1][0], index[1][1]], [k, l]] for k, l in
                        itertools.product(range(x, x + 3), range(y, y + 3))]
            newarcs.sort()
            newarcs = list(newarcs for newarcs, _ in itertools.groupby(newarcs))
            for i, j in itertools.product(range(0, 9), range(0, 9)):
                if [[i, j], [i, j]] in newarcs: newarcs.remove([[i, j], [i, j]])
            newarcs.remove([[index[1][0], index[1][1]], [index[1][0], index[1][1]]])
            queue += newarcs
    return True
